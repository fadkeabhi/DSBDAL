#Problem Statement No. 08
#1. Implement logistic regression using Python/R to perform classification on Social_Network_Ads.csv dataset. 
#2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall on the given dataset 
#Use :Social_Network_Ads.csv


import pandas as pd
df = pd.read_csv("Datasets/Social_Network_Ads.csv")
df.isnull().sum()

df.Gender.unique()
# male = 1 ; female = 0
df["IsMale"] = df.Gender
df["IsMale"] = df.Gender.apply(lambda x: 1 if x=="Male" else 0)

# Selecting features and target variable
X = df[['Age', 'EstimatedSalary','IsMale']]
y = df['Purchased']

from sklearn.model_selection import train_test_split
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

Xtrain = sc.fit_transform(Xtrain)
Xtest = sc.transform(Xtest)

from sklearn.linear_model import LogisticRegression

# Fitting Logistic Regression to the Training set
classifier = LogisticRegression(random_state=0)
classifier.fit(Xtrain, ytrain)

# Predicting the Test set results
y_pred = classifier.predict(Xtest)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

# Creating the Confusion Matrix
cm = confusion_matrix(ytest, y_pred)

import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(cm, annot=True, cmap='coolwarm')
plt.title("Confusion Matrix")
plt.show()

# Computing other metrics
accuracy = accuracy_score(ytest, y_pred)
error_rate = 1 - accuracy
precision = precision_score(ytest, y_pred)
recall = recall_score(ytest, y_pred)
f1 = f1_score(ytest, y_pred)

# Displaying the results
print("Confusion Matrix:")
print(cm)
print("\nAccuracy:", accuracy)
print("Error Rate:", error_rate)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)